{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","logo.png","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","launches","map","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e0d0c8e.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function LaunchItem({\r\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\r\n}) {\r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-9\">\r\n          <h4>\r\n            Mission:{' '}\r\n            <span\r\n              className={classNames({\r\n                'text-success': launch_success,\r\n                'text-danger': !launch_success,\r\n              })}\r\n            >\r\n              {mission_name}\r\n            </span>\r\n          </h4>\r\n          <p>\r\n            Date: <Moment format=\"YYY-MM-DD HH:mm\">{launch_date_local}</Moment>\r\n          </p>\r\n        </div>\r\n        <div className=\"col-md-3\">\r\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\r\n            Launch Details\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function MissionKey() {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n      </p>\r\n      <p>\r\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Fragment } from 'react';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Launches() {\r\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\r\n  if (loading) return <h4>Loading...</h4>;\r\n  if (error) return <p>Whoops... something is wrong</p>;\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"display-4 my-3\">Launches</h1>\r\n      <MissionKey />\r\n      <Fragment>\r\n        {data.launches.map((launch) => (\r\n          <LaunchItem key={launch.flight_number} launch={launch} />\r\n        ))}\r\n      </Fragment>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Launches;\r\n","import React, { Fragment } from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Launch(props) {\r\n  let { flight_number } = props.match.params;\r\n  flight_number = parseInt(flight_number);\r\n\r\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\r\n    variables: { flight_number },\r\n  });\r\n\r\n  if (loading) return <h4>Loading...</h4>;\r\n  if (error) return <p>Whoops... something is wrong</p>;\r\n\r\n  const {\r\n    mission_name,\r\n    launch_year,\r\n    launch_success,\r\n    rocket: { rocket_id, rocket_name, rocket_type },\r\n  } = data.launch;\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4 my-3\">\r\n        Mission:\r\n        <span className=\"text-dark\">{mission_name}</span>\r\n      </h1>\r\n      <h4 className=\"mb-3\">Launch Details</h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n        <li className=\"list-group-item\">\r\n          Launch Successful:{' '}\r\n          <span\r\n            className={classNames({\r\n              'text-success': launch_success,\r\n              'text-danger': !launch_success,\r\n            })}\r\n          >\r\n            {launch_success ? 'Yes' : 'No'}\r\n          </span>\r\n        </li>\r\n      </ul>\r\n      <h4 className=\"my-3\">Rocket Details</h4>\r\n      <ul className=\"list-group\">\r\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n      </ul>\r\n      <hr />\r\n      <Link to=\"/\" className=\"btn btn-secondary\">\r\n        Back\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Launch;\r\n","export default __webpack_public_path__ + \"static/media/logo.c0eb24c4.png\";","import './App.css';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport logo from './logo.png';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt=\"SpaceX\"\n            style={{ width: 300, display: 'block', margin: 'auto' }}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}